@startuml
class AccessoryRepository {
}
"RepositoryBase`1" "<Accessory>" <|-- AccessoryRepository
IAccessoryRepository <|-- AccessoryRepository
class ComponentRepository {
}
"RepositoryBase`1" "<Component>" <|-- ComponentRepository
IComponentRepository <|-- ComponentRepository
class ConsumableRepository {
}
"RepositoryBase`1" "<Consumable>" <|-- ConsumableRepository
IConsumableRepository <|-- ConsumableRepository
class DeviceRepository {
}
"RepositoryBase`1" "<Device>" <|-- DeviceRepository
IDeviceRepository <|-- DeviceRepository
class EmployeeRepository {
}
"RepositoryBase`1" "<Employee>" <|-- EmployeeRepository
IEmployeeRepository <|-- EmployeeRepository
class LicenseRepository {
}
"RepositoryBase`1" "<License>" <|-- LicenseRepository
ILicenseRepository <|-- LicenseRepository
abstract class "RepositoryBase`1"<T> {
}
"IRepositoryBase`1" "<T>" <|-- "RepositoryBase`1"
class RepositoryManager {
}
IRepositoryManager <|-- RepositoryManager
interface IAccessoryRepository {
    GetAllAccessoriesAsync(userId:Guid, accessoryParameters:AccessoryParameters) : Task<PagedList<Accessory>>
    GetAccessoryAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<Accessory>
    UpdateAccessory(accessory:Accessory) : void
    CreateAccessory(accessory:Accessory) : void
    DeleteAccessory(accessory:Accessory) : void
}
"IRepositoryBase`1" "<Accessory>" <|-- IAccessoryRepository
interface IComponentRepository {
    GetAllComponentsAsync(userId:Guid, componentParameters:ComponentParameters) : Task<PagedList<Component>>
    GetComponentAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<Component>
    UpdateComponent(component:Component) : void
    CreateComponent(component:Component) : void
    DeleteComponent(component:Component) : void
}
"IRepositoryBase`1" "<Component>" <|-- IComponentRepository
interface IConsumableRepository {
    GetAllConsumablesAsync(userId:Guid, consumableParameters:ConsumableParameters) : Task<PagedList<Consumable>>
    GetConsumableAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<Consumable>
    UpdateConsumable(consumable:Consumable) : void
    CreateConsumable(consumable:Consumable) : void
    DeleteConsumable(consumable:Consumable) : void
}
"IRepositoryBase`1" "<Consumable>" <|-- IConsumableRepository
interface IDeviceRepository {
    GetAllDevicesAsync(userId:Guid, deviceParameters:DeviceParameters) : Task<PagedList<Device>>
    GetDeviceAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<Device>
    UpdateDevice(device:Device) : void
    CreateDevice(device:Device) : void
    DeleteDevice(device:Device) : void
    GetAllEmployeeDevicesAsync(employeeId:Guid) : Task<IEnumerable<Device>>
}
"IRepositoryBase`1" "<Device>" <|-- IDeviceRepository
interface IEmployeeRepository {
    GetAllEmployees(userId:Guid, employeeParameters:EmployeeParameters) : Task<PagedList<Employee>>
    GetEmployeeAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<Employee>
    UpdateEmployee(employee:Employee) : void
    CreateEmployee(employee:Employee) : void
    DeleteEmployee(employee:Employee) : void
}
"IRepositoryBase`1" "<Employee>" <|-- IEmployeeRepository
interface ILicenseRepository {
    GetAllLicensesAsync(userId:Guid, licenseParameters:LicenseParameters) : Task<PagedList<License>>
    GetLicenseAsync(userId:Guid, id:Guid, trackChanges:bool) : Task<License>
    UpdateLicense(license:License) : void
    CreateLicense(license:License) : void
    DeleteLicense(license:License) : void
}
"IRepositoryBase`1" "<License>" <|-- ILicenseRepository
interface "IRepositoryBase`1"<T> {
    FindAll() : IQueryable<T>
    FindByCondition(expression:Expression<Func<T, bool>>, trackChanges:bool) : IQueryable<T>
    Create(entity:T) : void
    CreateRange(entities:IEnumerable<T>) : void
    Update(entity:T) : void
    Delete(entity:T) : void
    DeleteRange(entities:IEnumerable<T>) : void
}
interface IRepositoryManager {
    Employee : IEmployeeRepository <<get>>
    Device : IDeviceRepository <<get>>
    Accessory : IAccessoryRepository <<get>>
    Component : IComponentRepository <<get>>
    Consumable : IConsumableRepository <<get>>
    License : ILicenseRepository <<get>>
    SaveAsync() : Task
}
@enduml
